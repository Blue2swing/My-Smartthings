/**
 *  SmartThings SmartApp: Monoprice Select Mini
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 */
import groovy.json.JsonSlurper

definition(
  name: "MP Mini App",
  namespace: "Blue2swing",
  author: "Isaias",
  description: "Monoprice Select Mini SmartApp",
  category: "My Apps",
  iconUrl: "http://www.icon100.com/up/3816/256/35-3d-printer-printing-a-vehicle.png",
  iconX2Url: "http://www.icon100.com/up/3816/256/35-3d-printer-printing-a-vehicle.png",
  iconX3Url: "http://www.icon100.com/up/3816/256/35-3d-printer-printing-a-vehicle.png",
  singleInstance: true
)

preferences {
	page(name: "page1")
}

def page1() {
  dynamicPage(name: "page1", install: true, uninstall: true) {
    section("SmartThings Hub") {
      input "hostHub", "hub", title: "Select Hub", multiple: false, required: true
    }
    section("SmartThings Node Proxy") {
      input "proxyAddress", "text", title: "Proxy Address", description: "(ie. 192.168.1.10)", required: true
      input "proxyPort", "text", title: "Proxy Port", description: "(ie. 8080)", required: true, defaultValue: "8080"
      input "authCode", "password", title: "Auth Code", description: "", required: true, defaultValue: "secret-key"
    }
   section("3D Printer") {
     input name: "pluginType", type: "enum", title: "Plugin Type", required: true, submitOnChange: true, options: ["MP Select Mini"]
       input "securityCode", "password", title: "Security Code", description: "User code to arm/disarm the security panel", required: false
      input "enableDiscovery", "bool", title: "Discover Zones (WARNING: all existing zones will be removed)", required: false, defaultValue: false
    }

   if (pluginType == "MP Select Mini") {
      section("MP Select Mini TPI") {
        input "MPaddress", "text", title: "Host Address", description: "(ie. 192.168.1.11)", required: false
        input "MPport", "text", title: "Host Port", description: "(ie. 23)", required: false
       input "MPPassword", "password", title: "Password", description: "", required: false
      }
    }
        section("Smart Home Monitor") {
      input "enableSHM", "bool", title: "Integrate with Smart Home Monitor", required: true, defaultValue: true
    }
  }
}

def installed() {
  subscribeToEvents()
 // initialize()
}

def subscribeToEvents() {
  subscribe(location, null, lanResponseHandler, [filterEvents:false])
  subscribe(location, "alarmSystemStatus", alarmHandler)
}

def uninstalled() {
  removeChildDevices()
}

def updated() {
 if (settings.enableDiscovery) {
    //remove child devices as we will reload
   removeChildDevices()
  }
 
  //subscribe to callback/notifications from STNP
  sendCommand('/subscribe/'+getNotifyAddress())

  //save envisalink settings to STNP config
  if (settings.pluginType == "MP Select Mini" && settings.MPaddress && settings.MPport && settings.MPPassword && settings.securityCode) {
    sendCommandPlugin('/config/'+settings.MPaddress+":"+settings.MPport+":"+settings.MPPassword+":"+settings.securityCode)
  }

//  log.debug "Updated with settings: ${settings}"
 
 if (settings.enableDiscovery) {
    //delay discovery for 5 seconds
    runIn(5, discoverChildDevices)
   settings.enableDiscovery = false
  }
  
//   log.debug "Updated with settings: ${settings}"
// unsubscribe()
// initialize()
 
}

//def uninstalled() {
//  removeChildDevices()
//}

//def initialize() {
//        def dni = 'MP 3D Printer'
//        if (!getChildDevice(dni)) {
//        addChildDevice("Blue2swing", "3D Printer", dni, null, ["name": "Monoprice Mini 3D Printer", label: "Monoprice Mini 3D Printer", completedSetup: true])
//        log.debug "Added zone device: ${dni}"
//      }
//}



////////////////////////////////////////////////

def lanResponseHandler(evt) {
  def map = stringToMap(evt.stringValue)

  //verify that this message is from STNP IP:Port
  //IP and Port are only set on HTTP GET response and we need the MAC
  if (map.ip == convertIPtoHex(settings.proxyAddress) &&
    map.port == convertPortToHex(settings.proxyPort)) {
      if (map.mac) {
        state.proxyMac = map.mac
      }
  }

  //verify that this message is from STNP MAC
  //MAC is set on both HTTP GET response and NOTIFY
  if (map.mac != state.proxyMac) {
    return
  }

  def headers = getHttpHeaders(map.headers);
  def body = getHttpBody(map.body);
  log.trace "SmartThings Node Proxy: ${evt.stringValue}"
  log.trace "Headers: ${headers}"
  log.trace "Body: ${body}"

  //verify that this message is for this plugin
  if (headers.'stnp-plugin' != settings.pluginType) {
    return
  }

  log.trace "MP Select Mini event: ${evt.stringValue}"
  processEvent(body)
}

private sendCommandPlugin(path) {
  sendCommand("/plugins/"+settings.pluginType+path)
  log.trace "/plugins/"+settings.pluginType+path
}

private sendCommand(path) {
  log.trace "MP Select Mini send command: ${path}"

  if (settings.proxyAddress.length() == 0 ||
    settings.proxyPort.length() == 0) {
   // log.error "SmartThings Node Proxy configuration not set!"
    return
  }

  def host = getProxyAddress()
  def headers = [:]
  headers.put("HOST", host)
  headers.put("Content-Type", "application/json")
  headers.put("stnp-auth", settings.authCode)

  def hubAction = new physicalgraph.device.HubAction(
      method: "GET",
      path: path,
      headers: headers
  )
  sendHubCommand(hubAction)
}

private processEvent(evt) {
  if (evt.type == "discover") {                
    addChildDevices(evt.partitions, evt.zones)
  }
  if (evt.type == "zone") {
    updateZoneDevices(evt.zone, evt.state)
  }
  if (evt.type == "partition") {
    updatePartitions(evt.partition, evt.state, evt.alpha)
    updateAlarmSystemStatus(evt.state)
  }
}

private addChildDevices(partitions, zones) {
  partitions.each {
    //def deviceId = 'honeywell|partition'+it.partition
    def deviceId = "MP Select Mini"   /////////
    if (!getChildDevice(deviceId)) {
      addChildDevice("Blue2swing", "MP Select Mini", deviceId, hostHub.id, ["name": "Monoprice Mini 3D Printer", label: "Monoprice Mini 3D Printer", completedSetup: true])
///////////
      ///addChildDevice("redloro-smartthings", "Honeywell programing", dni, hostHub.id, ["name": "Honeywell Programing", label: "Honeywell Programing", completedSetup: true])
     ///log.debug "Added partition device: ${deviceId}"
      log.debug "Added device: ${deviceId}"
    }
  }
 
  zones.each {
    def deviceId = 'honeywell|zone'+it.zone
    if (!getChildDevice(deviceId)) {
      it.type = it.type.capitalize()
      addChildDevice("redloro-smartthings", "Honeywell Zone "+it.type, deviceId, hostHub.id, ["name": it.name, label: it.name, completedSetup: true])
     /// log.debug "Added zone device: ${deviceId}"
    }
  }
}

private removeChildDevices() {
  getAllChildDevices().each { deleteChildDevice(it.deviceNetworkId) }
}

def discoverChildDevices() {
  sendCommandPlugin('/discover')
}

private updateZoneDevices(zonenum,zonestatus) {
  log.debug "updateZoneDevices: ${zonenum} is ${zonestatus}"
  def zonedevice = getChildDevice("honeywell|zone${zonenum}")
  if (zonedevice) {
    zonedevice.zone("${zonestatus}")
  }
}

private updatePartitions(partitionnum, partitionstatus, panelalpha) {
  log.debug "updatePartitions: ${partitionnum} is ${partitionstatus}"
  def partitionDevice = getChildDevice("MP Select Mini")  /////
  if (partitionDevice) {
    partitionDevice.partition("${partitionstatus}", "${panelalpha}")
  }
   partitionDevice = getChildDevice("honeywell|partition${partitionnum}")
  if (partitionDevice) {
    partitionDevice.partition("${partitionstatus}", "${panelalpha}")
  }
}

def alarmHandler(evt) {
  if (!settings.enableSHM) {
    return
  }

  if (state.alarmSystemStatus == evt.value) {
    return
  }

  state.alarmSystemStatus = evt.value
  if (evt.value == "stay") {
    sendCommandPlugin('/armStay')
  }
  if (evt.value == "away") {
    sendCommandPlugin('/armAway')
  }
  if (evt.value == "off") {
    sendCommandPlugin('/disarm')
  }
}

private updateAlarmSystemStatus(partitionstatus) {
  if (!settings.enableSHM || partitionstatus == "arming") {
    return
  }

  def lastAlarmSystemStatus = state.alarmSystemStatus
  if (partitionstatus == "armedstay" || partitionstatus == "armedinstant") {
    state.alarmSystemStatus = "stay"
  }
  if (partitionstatus == "armedaway" || partitionstatus == "armedmax") {
    state.alarmSystemStatus = "away"
  }
  if (partitionstatus == "ready") {
    state.alarmSystemStatus = "off"
  }

  if (lastAlarmSystemStatus != state.alarmSystemStatus) {
    sendLocationEvent(name: "alarmSystemStatus", value: state.alarmSystemStatus)
  }
}

private getHttpHeaders(headers) {
  def obj = [:]
  new String(headers.decodeBase64()).split("\r\n").each {param ->
    def nameAndValue = param.split(":")
    obj[nameAndValue[0]] = (nameAndValue.length == 1) ? "" : nameAndValue[1].trim()
  }
  return obj
}

private getHttpBody(body) {
  def obj = null;
  if (body) {
    def slurper = new JsonSlurper()
    obj = slurper.parseText(new String(body.decodeBase64()))
  }
  return obj
}

private getProxyAddress() {
  return settings.proxyAddress + ":" + settings.proxyPort
}

private getNotifyAddress() {
  return settings.hostHub.localIP + ":" + settings.hostHub.localSrvPortTCP
}

private String convertIPtoHex(ipAddress) {
  return ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join().toUpperCase()
}

private String convertPortToHex(port) {
  return port.toString().format( '%04x', port.toInteger() ).toUpperCase()
}
